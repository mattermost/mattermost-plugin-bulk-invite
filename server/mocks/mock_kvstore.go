// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-bulk-invite/server/kvstore (interfaces: LockStore)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_kvstore.go -package=mocks github.com/mattermost/mattermost-plugin-bulk-invite/server/kvstore LockStore
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLockStore is a mock of LockStore interface.
type MockLockStore struct {
	ctrl     *gomock.Controller
	recorder *MockLockStoreMockRecorder
}

// MockLockStoreMockRecorder is the mock recorder for MockLockStore.
type MockLockStoreMockRecorder struct {
	mock *MockLockStore
}

// NewMockLockStore creates a new mock instance.
func NewMockLockStore(ctrl *gomock.Controller) *MockLockStore {
	mock := &MockLockStore{ctrl: ctrl}
	mock.recorder = &MockLockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLockStore) EXPECT() *MockLockStoreMockRecorder {
	return m.recorder
}

// IsLocked mocks base method.
func (m *MockLockStore) IsLocked(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLocked", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLocked indicates an expected call of IsLocked.
func (mr *MockLockStoreMockRecorder) IsLocked(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLocked", reflect.TypeOf((*MockLockStore)(nil).IsLocked), arg0)
}

// Lock mocks base method.
func (m *MockLockStore) Lock(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Lock indicates an expected call of Lock.
func (mr *MockLockStoreMockRecorder) Lock(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockLockStore)(nil).Lock), arg0)
}

// Unlock mocks base method.
func (m *MockLockStore) Unlock(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlock indicates an expected call of Unlock.
func (mr *MockLockStoreMockRecorder) Unlock(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockLockStore)(nil).Unlock), arg0)
}
